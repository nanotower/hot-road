frameworkVersion: '2'

service:
  name: serverless-forum-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  tracing:
    lambda: true
    apiGateway: true
    # s3: true
    # sns: true

  environment:
    USERS_TABLE: Users-${self:provider.stage}
    TOPICS_TABLE: Topics-${self:provider.stage}
    COMMENTS_TABLE: Comments-${self:provider.stage}
    CONNECTIONS_TABLE: Connections-${self:provider.stage}
    USER_ID_INDEX: userIdIndex
    TOPIC_ID_INDEX: topicIdIndex
    IMAGES_S3_BUCKET: serverless-users-pics-${self:provider.stage}
    THUMBNAILS_S3_BUCKET: serverless-users-thumbs-${self:provider.stage}
    URL_EXPIRES: 500

  iamRoleStatements:
      - Effect: "Allow"
        Action: 
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - "*"

custom:
  topicName: imagesTopic-${self:provider.stage}
  thumbTopicName: thumbTopic-${self:provider.stage}

  dynamodb:
    start:
      port: 8000
      migrate: true
      inMemory: true
    stages:
      - ${self:provider.stage}

  serverless-offline:
    port: 3003
    httpPort: 3003
  serverless-iam-roles-per-function:
    defaultInherit: true

  documentation:
    api:
      info:
        version: '1.0.0'
        title: serverless-forum-app
        description: hotroad forum Api
    models:
      - name: CreateTopicRequest
        contentType: "application/json"
        schema: ${file(src/models/createTopicRequestValidator.json)}
      - name: CreateTopicResponse
        contentType: "application/json"
        schema: ${file(src/models/createTopicResponseValidator.json)}
      - name: CreateCommentRequest
        contentType: "application/json"
        schema: ${file(src/models/createCommentRequestValidator.json)}
      - name: CreateCommentResponse
        contentType: "application/json"
        schema: ${file(src/models/createCommentResponseValidator.json)}
      - name: RegisterUserRequest
        contentType: "application/json"
        schema: ${file(src/models/registerUserRequestValidator.json)}
      - name: RegisterUserResponse
        contentType: "application/json"
        schema: ${file(src/models/registerUserResponseValidator.json)}
      - name: UpdateTopicRequest
        contentType: "application/json"
        schema: ${file(src/models/updateTopicRequestValidator.json)}
      - name: UpdateTopicResponse
        contentType: "application/json"
        schema: ${file(src/models/updateTopicResponseValidator.json)}
          
  commonModelSchemaFragments:
    MethodResponse400Json:
      statusCode: '400'
      responseModels:
        "application/json": 400JsonResponse

functions:
  Auth:
    handler: src/lambda/auth/auth0.handler

  GetUser:
    handler: src/lambda/http/getUser.handler
    events:
      - http:
          authorizer: Auth
          method: get
          path: hotroad/user/login
          cors: true
    iamRoleStatementsName: ${self:service.name}-GetUser-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}

  RegisterUser:
    handler: src/lambda/http/registerUser.handler
    events:
      - http:
          authorizer: Auth
          method: post
          path: hotroad/user/sign-up
          cors: true
          reqValidatorName: 'xMyRequestValidator'
          documentation:
            summary: "new user"
            description: "create new user"
            requestModels:
              "application/json": RegisterUserRequest
          methodResponses:
              - statusCode: '200'
                responseModels:
                  "application/json": RegisterUserResponse
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
    iamRoleStatementsName: ${self:service.name}-RegisterUser-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}

  CreateTopic:
    handler: src/lambda/http/createTopic.handler
    events:
      - http:
          authorizer: Auth
          method: post
          path: hotroad/topic/create
          cors: true
          reqValidatorName: 'xMyRequestValidator'
          documentation:
            summary: "new topic"
            description: "create new topic"
            requestModels:
              "application/json": CreateTopicRequest
          methodResponses:
              - statusCode: '200'
                responseModels:
                  "application/json": CreateTopicResponse
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
    iamRoleStatementsName: ${self:service.name}-CreateTopic-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TOPICS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
        
  DeleteTopic:
    handler: src/lambda/http/deleteTopic.handler
    events:
      - http:
          authorizer: Auth
          method: delete
          path: hotroad/topic/{topicId}/delete
          cors: true
    iamRoleStatementsName: ${self:service.name}-DeleteTopic-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TOPICS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}

  GetTopics:
    handler: src/lambda/http/getTopics.handler
    events:
      - http:
          authorizer: Auth
          method: get
          path: hotroad/topic/all
          cors: true
    iamRoleStatementsName: ${self:service.name}-GetTopics-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TOPICS_TABLE}

  CreateComment:
    handler: src/lambda/http/createComment.handler
    events:
      - http:
          authorizer: Auth
          method: post
          path: hotroad/topic/{topicId}/create-comment
          cors: true
          reqValidatorName: 'xMyRequestValidator'
          documentation:
            summary: "new comment"
            description: "create new comment in topic"
            requestModels:
              "application/json": CreateCommentRequest
          methodResponses:
              - statusCode: '200'
                responseModels:
                  "application/json": CreateCommentResponse
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
    iamRoleStatementsName: ${self:service.name}-CreateComment-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TOPICS_TABLE}

  GetComments:
    handler: src/lambda/http/getComments.handler
    events:
      - http:
          authorizer: Auth
          method: get
          path: hotroad/topic/{topicId}/comments
          cors: true
    iamRoleStatementsName: ${self:service.name}-GetComments-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}/index/${self:provider.environment.TOPIC_ID_INDEX}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          authorizer: Auth
          method: post
          path: hotroad/user/attachment
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*

  GetUserTopics:
    handler: src/lambda/http/getUserTopics.handler
    events:
      - http:
          authorizer: Auth
          method: get
          path: hotroad/user/topics
          cors: true
    iamRoleStatementsName: ${self:service.name}-GetUserTopics-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TOPICS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TOPICS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}

  UpdateTopicName:
    handler: src/lambda/http/updateTopicName.handler
    events:
      - http:
          authorizer: Auth
          method: patch
          path: hotroad/topic/{topicId}/modify
          cors: true
          reqValidatorName: 'xMyRequestValidator'
          documentation:
            summary: "update topic"
            description: "update topic title"
            requestModels:
              "application/json": UpdateTopicRequest
          methodResponses:
              - statusCode: '200'
                responseModels:
                  "application/json": UpdateTopicResponse
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
    iamRoleStatementsName: ${self:service.name}-UpdateTopicName-${self:provider.stage}
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TOPICS_TABLE}

  ConnectHandler:
    handler: src/lambda/websocket/connect.handler
    events:
      - websocket:
          route: $connect
    iamRoleStatementsName: ${self:service.name}-ConnectHandler-${self:provider.stage}
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem 
      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}

  DisconnectHandler:
    handler: src/lambda/websocket/disconnect.handler
    events:
      - websocket:
          route: $disconnect
    iamRoleStatementsName: ${self:service.name}-DisconnectHandler-${self:provider.stage}
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}

  SendUploadNotifications:
    environment:
      STAGE: ${self:provider.stage}
      API_ID:
        Ref: WebsocketsApi
    handler: src/lambda/s3/SendNotifications.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.thumbTopicName}
          topicName: ${self:custom.thumbTopicName}
    iamRoleStatementsName: ${self:service.name}-SendUploadNotifications-${self:provider.stage}
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}
    - Effect: Allow
      Action:
        - execute-api:Invoke
        - execute-api:ManageConnections
      Resource: arn:aws:execute-api:us-east-2:*:*
      #         arn:aws:execute-api:${opt:region, self:provider.region}:account-id:api-id/stage-name/HTTP-VERB/resource-path-specifier
      # arn:
      #       Fn::Join:
      #         - ':'
      #         - - arn:aws:execute-api
      #           - Ref: AWS::Region
      #           - Ref: AWS::AccountId
      #           - Ref: AWS::AccountId
      #           - ${self:custom.thumbTopicName}
      #     topicName: ${self:custom.thumbTopicName}


  ResizeImage:
    handler: src/lambda/s3/resizeImage.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}
    iamRoleStatementsName: ${self:service.name}-ResizeImage-${self:provider.stage}
    iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource: arn:aws:s3:::${self:provider.environment.THUMBNAILS_S3_BUCKET}/*
    - Effect: Allow
      Action:
        - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*

          
resources:
  Resources:

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USERS_TABLE}

    TopicsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: topicId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: topicId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TOPICS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
    
    CommentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: commentId
            AttributeType: S
          - AttributeName: topicId
            AttributeType: S
        KeySchema:
          - AttributeName: commentId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.COMMENTS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TOPIC_ID_INDEX}
            KeySchema:
            - AttributeName: topicId
              KeyType: HASH
            Projection:
              ProjectionType: ALL

    WebSocketConnectionsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref ImagesTopic
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 10000
    
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 
                - s3:PutObject
                - s3:GetObject
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
    
    xMyRequestValidator:  
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'my-req-validator'
        RestApiId: 
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false  

    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref ImagesTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}
        Topics:
          - !Ref ImagesTopic

    SNSThumbsTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref ThumbTopicName
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.THUMBNAILS_S3_BUCKET}
        Topics:
          - !Ref ThumbTopicName

    ThumbnailsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.THUMBNAILS_S3_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref ThumbTopicName
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 10000

    ThumbsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 
                - s3:PutObject
                - s3:GetObject
              Resource: 'arn:aws:s3:::${self:provider.environment.THUMBNAILS_S3_BUCKET}/*'
        Bucket: !Ref ThumbnailsBucket

    ImagesTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Image bucket topic
        TopicName: ${self:custom.topicName}

    ThumbTopicName:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Thumbs bucket topic
        TopicName: ${self:custom.thumbTopicName}
